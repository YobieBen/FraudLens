version: '3.8'

services:
  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: fraudlens-redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD:-fraudlens_redis_pwd}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-fraudlens_redis_pwd}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fraudlens-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fraudlens-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-fraudlens}
      POSTGRES_USER: ${POSTGRES_USER:-fraudlens}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-fraudlens_secure_pwd}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-fraudlens}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fraudlens-network

  # Main API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.production
      args:
        BUILD_DATE: ${BUILD_DATE}
        VCS_REF: ${VCS_REF}
        VERSION: ${VERSION:-1.0.0}
    image: fraudlens:${VERSION:-latest}
    container_name: fraudlens-api
    restart: unless-stopped
    env_file:
      - .env.production
    environment:
      # Application
      FRAUDLENS_ENV: production
      FRAUDLENS_DEBUG: "false"
      
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-fraudlens}:${POSTGRES_PASSWORD:-fraudlens_secure_pwd}@postgres:5432/${POSTGRES_DB:-fraudlens}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-fraudlens_redis_pwd}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      
      # Performance
      WORKERS: ${API_WORKERS:-4}
      MAX_CONNECTIONS: ${MAX_CONNECTIONS:-100}
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - uploads-data:/app/data/uploads
      - cache-data:/app/data/cache
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - fraudlens-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  # Streamlit UI
  streamlit:
    image: fraudlens:${VERSION:-latest}
    container_name: fraudlens-ui
    restart: unless-stopped
    command: streamlit run demo/streamlit_enhanced.py --server.port 8501 --server.address 0.0.0.0 --server.baseUrlPath /ui
    env_file:
      - .env.production
    environment:
      FRAUDLENS_ENV: production
      API_BASE_URL: http://api:8000
      STREAMLIT_SERVER_HEADLESS: "true"
      STREAMLIT_SERVER_FILE_WATCHER_TYPE: none
    ports:
      - "127.0.0.1:8501:8501"
    volumes:
      - ./demo:/app/demo:ro
      - uploads-data:/app/data/uploads
    depends_on:
      api:
        condition: service_healthy
    networks:
      - fraudlens-network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Background Worker
  worker:
    image: fraudlens:${VERSION:-latest}
    container_name: fraudlens-worker
    restart: unless-stopped
    command: python -m fraudlens.workers.background_worker
    env_file:
      - .env.production
    environment:
      FRAUDLENS_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-fraudlens}:${POSTGRES_PASSWORD:-fraudlens_secure_pwd}@postgres:5432/${POSTGRES_DB:-fraudlens}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-fraudlens_redis_pwd}
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-4}
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - uploads-data:/app/data/uploads
      - cache-data:/app/data/cache
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - fraudlens-network
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
      replicas: ${WORKER_REPLICAS:-2}

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: fraudlens-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    depends_on:
      - api
      - streamlit
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fraudlens-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: fraudlens-prometheus
    restart: unless-stopped
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - fraudlens-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: fraudlens-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: redis-datasource,postgres-datasource
      GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL:-http://localhost:3000}
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - fraudlens-network

  # Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: fraudlens-loki
    restart: unless-stopped
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - fraudlens-network

  # Log Collector
  promtail:
    image: grafana/promtail:latest
    container_name: fraudlens-promtail
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs:ro
      - nginx-logs:/var/log/nginx:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - fraudlens-network

networks:
  fraudlens-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  loki-data:
    driver: local
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local
  uploads-data:
    driver: local
  cache-data:
    driver: local