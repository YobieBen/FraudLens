# FraudLens Project Configuration
# Author: Yobie Benjamin
# Date: 2025-08-26 18:34:00 PDT

[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "fraudlens"
version = "0.1.0"
description = "Open-source multi-modal fraud detection system optimized for Apple Silicon"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Yobie Benjamin", email = "yobie@fraudlens.io"},
]
maintainers = [
    {name = "FraudLens Community", email = "community@fraudlens.io"},
]
keywords = [
    "fraud-detection",
    "machine-learning",
    "apple-silicon",
    "multi-modal",
    "open-source",
    "security",
    "mlx",
    "async",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.10"
dependencies = [
    "numpy>=1.26.0",
    "scipy>=1.13.0",
    "pandas>=2.2.0",
    "scikit-learn>=1.5.0",
    "asyncio-mqtt>=0.16.0",
    "aiofiles>=24.1.0",
    "aiohttp>=3.10.0",
    "pyyaml>=6.0",
    "toml>=0.10.0",
    "psutil>=6.0.0",
    "Pillow>=10.4.0",
    "opencv-python>=4.10.0",
    "pypdf>=4.3.0",
    "nltk>=3.9.0",
    "fastapi>=0.112.0",
    "uvicorn>=0.30.0",
    "pydantic>=2.8.0",
    "loguru>=0.7.0",
    "rich>=13.8.0",
    "tqdm>=4.66.0",
    "jsonschema>=4.23.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "black>=24.8.0",
    "ruff>=0.6.0",
    "mypy>=1.11.0",
    "pre-commit>=3.8.0",
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.0",
]
mlx = [
    "mlx>=0.16.0",
]
torch = [
    "torch>=2.4.0",
]
tensorflow = [
    "tensorflow>=2.17.0",
]

[project.urls]
Homepage = "https://fraudlens.io"
Documentation = "https://docs.fraudlens.io"
Repository = "https://github.com/yourusername/fraudlens"
Issues = "https://github.com/yourusername/fraudlens/issues"
Discord = "https://discord.gg/fraudlens"

[project.scripts]
fraudlens = "fraudlens.cli:main"
fraudlens-demo = "fraudlens.demo:main"

[tool.setuptools]
packages = ["fraudlens"]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long
    "B008",  # do not perform function calls in argument defaults
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["fraudlens"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]